// import { LoadScript, GoogleMap, Polyline, useJsApiLoader } from "@react-google-maps/api";
// import { useSelector } from "react-redux";
// import { Marker } from '@react-google-maps/api';
// import Loading from "../Loading/Loading";
// import { sulutionScheduelAsync, sulutionScheduelSelector } from "../../../store/slices/Solution/sollutionScheduleSlice"
// import { useEffect } from "react";
// import { useAppDispatch } from "../../../store/store";
// import { roleSelector } from "../../../store/slices/auth/rolesSlice";
// import { SolutionCrane } from "../../../store/slices/Solution/ftsSolutionTableSlice";
// // import { roleSelector } from "../../../store/slices/auth/rolesSlice";
// // import { useAppDispatch } from "../../../store/store";
// // import { useEffect } from "react";

// // window.google;

// // const google = window.google = window.google ? window.google : {}

// export default function RouteMaps({ ftsSolutionReducer, value }: {ftsSolutionReducer:SolutionCrane[],value:number}) {
//     // const solutionscheduleReducer = useSelector(sulutionScheduelSelector)
//     // const roleRreducer = useSelector(roleSelector)
//     // console.log(solutionscheduleReducer.result)
//     const apiKey = import.meta.env.VITE_GOOGLE_MAPS_API_KEY
//     // const { isLoaded } = useJsApiLoader({ googleMapsApiKey: apiKey });
//     // if (!isLoaded) {
//     //     return null;
//     // }
//     // const dispatch = useAppDispatch()
//     // const id = roleRreducer.result?.group
//     // console.log(ftsSolutionReducer)
//     const datav2 = ftsSolutionReducer
//         .filter((items) => items.fts.FTS_name === ftsSolutionReducer[value].fts.FTS_name)
//         .map((item) => ({
//             lat: item.fts.lat,
//             lng: item.fts.lng,
//         }));
//     // console.log(datav2)
//     const mapStyles: React.CSSProperties = {
//         height: '50vh',
//         width: '100%'
//     };


//     return (
//         <>
//             <LoadScript googleMapsApiKey={apiKey}>
//                 <GoogleMap
//                     mapContainerStyle={mapStyles}
//                     zoom={13}
//                     center={
//                         { lat: 13.177009, lng: 100.840662 }
//                     }
//                 >
//                     {/* {(datav2).map((item: any) => (
//                         <Marker
//                             key={`${item.lat}-${item.lng}`}
//                             position={{ lat: item.lat, lng: item.lng }}
//                         // icon={index === 0 ? blueMarkerIcon : undefined}
//                         />
//                     ))}
//                     <Polyline
//                         path={datav2}
//                         options={{
//                             strokeColor: '#FF0000', // สีของเส้น Polyline
//                             strokeOpacity: 1.0, // ความโปร่งใสของเส้น Polyline
//                             strokeWeight: 2, // ความหนาของเส้น Polyline
//                         }}
//                     /> */}
//                 </GoogleMap>
//             </LoadScript>
//         </>
//     );
// }

import { LoadScript, GoogleMap, Polyline, useJsApiLoader } from "@react-google-maps/api";
import { useSelector } from "react-redux";
import { Marker } from '@react-google-maps/api';
import Loading from "../Loading/Loading";
import { sulutionScheduelSelector } from "../../../store/slices/Solution/sollutionScheduleSlice"
import { roleSelector } from "../../../store/slices/auth/rolesSlice";

export default function RouteMaps({ ftsSolutionReducer, value }: any) {
    const solutionscheduleReducer = useSelector(sulutionScheduelSelector)
    const roleRreducer = useSelector(roleSelector)
    const apiKey = import.meta.env.VITE_GOOGLE_MAPS_API_KEY

    const { isLoaded } = useJsApiLoader({ googleMapsApiKey: apiKey });
    if (!isLoaded) {
        return null;
    }

    // const result = solutionscheduleReducer.result.filter((group) => group.solution_id === roleRreducer.result?.group)


    const datav2 = solutionscheduleReducer.result
        .filter((items) => items.FTS_name === ftsSolutionReducer[value]?.fts.FTS_name)
        .map((item) => ({
            lat: item.lat,
            lng: item.lng,
        }));
    const mapStyles: React.CSSProperties = {
        height: '50vh',
        width: '100%'
    };


    return (
        <div className="App">
            {solutionscheduleReducer.loading ? (
                <Loading />
            ) : (
                <LoadScript googleMapsApiKey={apiKey}>
                    <GoogleMap
                        mapContainerStyle={mapStyles}
                        zoom={13}
                        center={{ lat: 13.177009, lng: 100.840662 }}
                    >
                        {(datav2).map((item: any) => (
                            <Marker
                                key={`${item.lat}-${item.lng}`}
                                position={{ lat: item.lat, lng: item.lng }}
                            // icon={index === 0 ? blueMarkerIcon : undefined}
                            />
                        ))}
                        <Polyline
                            path={datav2}
                            options={{
                                strokeColor: '#FF0000', // สีของเส้น Polyline
                                strokeOpacity: 1.0, // ความโปร่งใสของเส้น Polyline
                                strokeWeight: 2, // ความหนาของเส้น Polyline
                            }}
                        />
                    </GoogleMap>
                </LoadScript>
            )}
        </div>
    );
}